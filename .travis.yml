language: python

# Setting sudo to false opts in to Travis-CI container-based builds.
sudo: false

# The apt packages below are needed for sphinx builds, which can no longer
# be installed with sudo apt-get.
addons:
    apt:
        packages:
            - graphviz
            - texlive-latex-extra
            - dvipng

python:
    #- 2.7
    #- 3.3
    #- 3.4
    # This is just for "egg_info".  All other builds are explicitly given in the matrix
env:
    global:
        # The following versions are the 'default' for tests, unless
        # overidden underneath. They are defined here in order to save having
        # to repeat them for all configurations.
        - NUMPY_VERSION=1.8
        - ASTROPY_VERSION=stable
        - CONDA_INSTALL='conda install -c astropy-ci-extras --yes'
        - PIP_INSTALL='pip install'
    #matrix:
    #    - SETUP_CMD='egg_info'

matrix:
    include:

        # Do a coverage test in Python 2.
        # *** TODO: `python setup.py test --coverage` doesn't work yet for `ginga` ... skipping for now
        # - python: 2.7
        #  env: SETUP_CMD='test --coverage'

        # Check for sphinx doc build warnings - we do this first because it
        # may run for a long time
        # *** TODO: The `-w` option doesn't work with `python setup.py build_sphinx` yet for `ginga` ... removing it for now
        - python: 2.7
          # env: SETUP_CMD='build_sphinx -w'
          env: SETUP_CMD='build_sphinx'

        # Try Astropy development version
        - python: 2.7
          env: ASTROPY_VERSION=development SETUP_CMD='test'
        - python: 3.3
          env: ASTROPY_VERSION=development SETUP_CMD='test'

        # Try all python versions with the latest numpy
        - python: 2.7
          env: SETUP_CMD='test'
        - python: 3.3
          env: SETUP_CMD='test'
        - python: 3.4
          env: SETUP_CMD='test'

        # Try older numpy versions
        - python: 2.7
          env: NUMPY_VERSION=1.7 SETUP_CMD='test'

before_install:

    # Use utf8 encoding. Should be default, but this is insurance against
    # future changes
    - export PYTHONIOENCODING=UTF8
    - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - conda update --yes conda

install:

    # CONDA
    - conda create --yes -n test -c astropy-ci-extras python=$TRAVIS_PYTHON_VERSION
    - source activate test

    # CORE DEPENDENCIES
    - if [[ $SETUP_CMD != egg_info ]]; then $CONDA_INSTALL numpy=$NUMPY_VERSION pytest pip Cython jinja2; fi
    - if [[ $SETUP_CMD != egg_info ]]; then $PIP_INSTALL pytest-xdist; fi

    # ASTROPY
    - if [[ $SETUP_CMD != egg_info ]] && [[ $ASTROPY_VERSION == development ]]; then $PIP_INSTALL git+http://github.com/astropy/astropy.git#egg=astropy; fi
    - if [[ $SETUP_CMD != egg_info ]] && [[ $ASTROPY_VERSION == stable ]]; then $CONDA_INSTALL numpy=$NUMPY_VERSION astropy; fi

    # OPTIONAL DEPENDENCIES
    # Here you can add any dependencies your package may have. You can use
    # conda for packages available through conda, or pip for any other
    # packages. You should leave the `numpy=$NUMPY_VERSION` in the `conda`
    # install since this ensures Numpy does not get automatically upgraded.

    # *** TODO: We should test the various GUI toolkits that ginga supports
    # on travis-ci ... probably one build for Python 2 / 3 and each toolkit
    # https://ginga.readthedocs.io/en/latest/install.html#dependences
    - if [[ $SETUP_CMD != egg_info ]]; then $CONDA_INSTALL pyqt ; fi
    # - if [[ $SETUP_CMD != egg_info ]]; then $PIP_INSTALL ...; fi

    # DOCUMENTATION DEPENDENCIES
    # build_sphinx needs sphinx and matplotlib (for plot_directive). Note that
    # this matplotlib will *not* work with py 3.x, but our sphinx build is
    # currently 2.7, so that's fine
    - if [[ $SETUP_CMD == build_sphinx* ]]; then $CONDA_INSTALL numpy=$NUMPY_VERSION Sphinx matplotlib; fi
    - if [[ $SETUP_CMD == build_sphinx* ]]; then $PIP_INSTALL linkchecker; fi
    # This is needed for API autodoc
    - if [[ $SETUP_CMD == build_sphinx* ]]; then $PIP_INSTALL numpydoc; fi

    # COVERAGE DEPENDENCIES
    - if [[ $SETUP_CMD == 'test --coverage' ]]; then $PIP_INSTALL coverage coveralls; fi

script:
   - python setup.py $SETUP_CMD
   # TODO: once Ginga has adopted the affiliated package-template,
   # the Python module index should be generated and `--ignore-url py-modindex.html` can be removed here.
   - if [[ $SETUP_CMD == build_sphinx* ]]; then linkchecker doc/_build/html/index.html --ignore-url py-modindex.html; fi

after_success:
    # If coveralls.io is set up for this package, uncomment the line
    # below and replace "packagename" with the name of your package.
    # The coveragerc file may be customized as needed for your package.
    # - if [[ $SETUP_CMD == 'test --coverage' ]]; then coveralls --rcfile='packagename/tests/coveragerc'; fi
